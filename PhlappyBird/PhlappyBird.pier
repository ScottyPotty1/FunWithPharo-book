!PhlappyBird

PhlappyBird is a smalltalk clone of the well-known little game. It is a nice example of building a small Morphic application and well suited for a tutorial. 
+file://figures/PhlappyBird.png|width=50|label=PhlappyBird+

!! The top level window

The top level window is a SystemWindow containing a game scene and a button to restart the game. The scene will be recreated when the button is pressed, and it is easiest to just have an instance variable refering to it. 

[[[
SystemWindow subclass: #PhlappyBirdGame
	instanceVariableNames: 'scene'
	classVariableNames: ''
	category: 'PhlappyBird'
]]]

The game can be started by typing ==PhlappyBirdGame play <DoIt>==. That creates a new game, opens its window in the world and sets its width and height.

[[[
PhlappyBirdGame class>>play
	PhlappyBirdGame new
		openInWorld;
		extent: 298@510.
]]]

In Pharo, ==new== calls ==initialize==. In the initialization, the scene is created, the window is given a title and made unresizable, the scene is told that when the space key is pressed the bird should flap its wings and the restart button is added.

[[[
PhlappyBirdGame>>initialize
	super initialize.
	scene := self newScene.
	self 
		setLabel: 'Phlappy Bird';
		beUnresizeable;
		on: Character space do: [ scene flapTheBird ];
		addMorph: self createRestartButton 
		    frame: (0@0.92 corner: 1@1)
]]].

The ==addMorph:frame:== message is the morphic implementation of the composite pattern. All Morphs can be composites. Most Morphs use ==addMorph:fullFrame:== where the frame provides a layout object, but a SystemWindow adds a simpler variant where a proportional layout can be used with a rectangle with values between 0 and 1 for the relative size. The button takes the 8% of the bottom part of the user-draw area of the window.
The scene takes the rest.

[[[
PhlappyBirdGame>>newScene
	| newScene |
	newScene := Scene new.
	self 
		addMorph: newScene 
		frame: (0@0 corner: 1@0.92).	
	^ newScene
]]]

!!! The restart button
The button is a ==PluggableButtonMorph==. A PluggableButtonMorph is a themeable button, that takes colors, borders and corner radius from the currently selected theme. 

;SystemWindow is also a theme-aware object.

[[[
PhlappyBirdGame>>createRestartButton
	^ PluggableButtonMorph
		on: self
		getState: nil
		action: #restartPressed
		label: #restartButtonLabel
]]]

The PluggableButtonMorph will react to being clicked on by performing the ==restartPressed== action method on its model (self), and gets its label from the ==restartButtonLabel== method. The label is just a string. A PluggableButtonMorph can show a binary value, and by ==setState: nil== it is indicated that this is just a plain button.

[[[
PhlappyBirdGame>>restartButtonLabel
	^ 'New Game'
]]]

When the button is pressed, the current scene is removed as submorph from the window and a new one is created and added.
[[[
PhlappyBirdGame>>restartPressed
	scene delete.
	scene := self newScene.
]]]

!! The scene

The scene is responsible for the gameplay. It knows the elements that need to be shown on the screen and how to animate them.
[[[
PanelMorph subclass: #Scene
	instanceVariableNames: 'bird script animated physicals score scoreLabel'
	classVariableNames: ''
	category: 'PhlappyBird'
]]]
In the initialization, all game elements are initialized. The score is set to zero. 
The bird, ground and end-of-world are going to be responsible for detecting collisions, and 
will then call the scene to deal with the consequences of the collision. The initial collection of things 
to animate, and those that might collide is created. All morphs are added to the panel and the bird is 
told to start moving. 

[[[
Scene>>initialize
	| endOfWorld ground |
	super initialize.
	score := 0.
	bird := Bird collisionResolver: self.
	ground := Ground top: 400 collisionResolver: self.
	endOfWorld := EndOfWorld topLeft: self topLeft collisionResolver: self.
	script := Script scene: self.
	animated := OrderedCollection with: bird with: ground with: script.
	physicals := OrderedCollection with: bird with: endOfWorld with: ground.
	self
		addMorph: Background new;
		addMorph: ground;
		addMorph: bird;
		addMorph: endOfWorld;
		addMorph: self createScoreLabel.
	bird liftOff
]]] 

Animation in Morphic is done by making morphs step. After each step, the scene checks if there has been a collision that would
end the game.

[[[
Scene>>step
	self animate.
	self detectCollision.
]]]

The step method has to be sent often enough to create a smooth effect. The stepTime sets the delay in milliseconds.
35 ms corresponds with about 28 times/second. For perfect results, it should be synchronized with the screen refresh
rate. If the stepTime is set too low, the game becomes too difficult to play. or the movement in the animation needs to be
reduced.

[[[
Scene>>stepTime
	^35
]]]   

To create the illusion of movement, there are 3 different images of the flappy bird, that are shown one after the other.
Because the wings are in a different position each time, it looks like the wings are flapping. If a smoother movement is
wanted, more images should be added.
+file://figures/Bird1.png|width=25|label=Bird1+
+file://figures/Bird2.png|width=25|label=Bird2+
+file://figures/Bird3.png|width=25|label=Bird3+

In the animation, all things that can move are send the ==tick== message.

[[[
Scene>>animate
	animated do: #tick.
]]]


!! Resources

Where do all the bitmaps for the game come from? The class ==Resources== has class-side methods where they are stored.

[[[
Object subclass: #Resources
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'PhlappyBird'
]]]

There are seven different bitmaps with corresponding method names:
-background
-bird1
-bird2
-bird3
-ground
-pipe1
-pipe2

They all have the same structure. For each of these methods, there is a corresponding content method that holds a Base64 encoded string representation of the bitmap.

[[[
Resources class>>background
	^ self loadForm: #backgroundContent
]]]

LoadForm looks in the cache to find the Form and creates it from the contents when it cannot find the key

[[[
Resources class>>loadForm: aSymbol
	^ self cache 
		at: aSymbol
		ifAbsentPut:
			[ Form new 
				readFrom: (Base64MimeConverter 
					mimeDecodeToBytes: (self perform: aSymbol) readStream) ]
]]]

On the class side, there is a instance variable cache and a lazy accessor.

[[[
Resources class>>cache
	^ cache := cache ifNil: [ cache := Dictionary new ]
]]]

Please note that the resource methods cannot be very large, as there are method size limitations in the tooling.
