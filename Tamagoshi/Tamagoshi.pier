
! A Digital Animal: A gluttonous Tamagoshi

In this chapter we propose you to develop a small digital animal that has its own life require care for you. 
People were really found of digital animals called tamagoshi. Therefore  we will build one step by step. 
This project is a pretext for revisiting the basic actions to define a class, instance variables and methods. 

!!A gluttonous Tamagoshi

We have to decide the behavior that our digital beats should have. 
Here is the list of the behavior we propose you to implement for our  tomagoshi. The Figure~\ref{fig:tomastate} represents how the tomagoshi changes its state. 


-- It can eat and digest food. It can be hungry when its tummy is empty and satisfied when it eats enough food.
-- It has its own life cycle with its own isNights and days. It goes to sleep at isNight and wake up the morning. 
-- It is gluttonous and selfish so falls asleep as soon as it eats enough. 
-- Its change color depending on its mood.  

We choose to have blue when it is  satisfied possibly sleeping, black when sleeping but hungry, green when waking up, and red when it is hungry. 


% \includegraphics[width=8cm]{figures/tomastate}



!!A Square Tamagoshi






!! Define a package named Tamagoshi

Define a new package named for example 'Tamagoshi' and define the class ==Tamagoshi==. As we would like to be able to interact with it and have a graphical representation, we define  the class ==Tamagoshi== as a subclass of the class ==Morph==. 


[[[
Morph subclass: #Tamagoshi
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'Tamagoshi'
]]]



We edit the class comment by pressing the =?=button and write something in the vein of:

[[[
I represent a tamagoshi. A small virtual animal that have its own life.
]]]

Executing the following snippet should get you a blue square as shown in *squareTamagoshi*.

[[[
Tamagoshi new openInHand
]]]


+A square and rudimentary tamagoshi>file://figures/squareTamagoshi|width=50|label=squareTamagoshi+


!!!!Create a protocol named ==stepping==


[[[
stepTime 
	"Return the time interval for action"
	
	^ 500
]]]



!!!! Open a Transcript



[[[
step

	self logCr: 'hello'
]]]

!!!! Open a Transcript


+helloInTranscript>file://figures/helloInTranscript|width=50|label=squareTamagoshi+



!!!! Recreate a new tamagoshi


[[[
Tamagoshi new openInHand
]]]

To stop bring halos and click on cross it should delete the tamagoshi


+TamaWithHalo>file://figures/TamaWithHalo|width=50|label=TamaWithHalo+


To interact with it
- select the menu inspect 

+TamaWithHalo>file://figures/TamaWithInspectMenu|width=50|label=TamaWithInspectMenu+



+TamagoshiWithInspector>file://figures/TamagoshiWithInspector|width=50|label=TamagoshiWithInspector+


+TamaWithInspectorAndInstruction>file://figures/TamaWithInspectorAndInstruction|width=50|label=TamaWithInspectorAndInstruction+


To open an inspector when we create a tamagoshi we can send the message inspect as follows: 

[[[
Tamagoshi new openInHand inspect
]]]

!!! Adding a Name

[[[
Morph subclass: #Tamagoshi
	instanceVariableNames: 'name'
	classVariableNames: ''
	category: 'Tamagoshi'
]]]



Make sure that if we do not give a name it is named =='pika'==.  when we create a new object by sending  the new message, the message initialize is sent. So we redefine it to put a new value with the string =='pika'==. 

[[[
Tamagoshi>>initialize

	super initialize. 
	name := 'pika'
]]]


Recreate a new tamagoshi
[[[
Tamagoshi new openInHand inspect
]]]


you should get the following:


+TamaWithName>file://figures/TamaWithName|width=50|label=TamaWithName+




+withPopUp>file://figures/withPopUp|width=50|label=withPopUp+





[[[
UIManager default request:  'Give a name to your tamagoshi' 
]]]


+requestInTranscript>file://figures/requestInTranscript|width=50|label=requestInTranscript+


[[[
promptForName

	name := UIManager default request: 'Give a name please'
]]]


[[[
step

	self logCr: 'hello, my name is ', name
]]]




+inspectorWithFifiPrompt>file://figures/inspectorWithFifiPrompt|width=50|label=inspectorWithFifiPrompt+




+promptWithNil>file://figures/promptWithNil|width=50|label=promptWithNil+


[[[
promptForName

	| newName |
	newName := UIManager default request: 'Give a name please'.
	newName isNil 
		ifTrue: [ ]
		ifFalse: [ name := newName ]
]]]

[[[
promptForName

	| newName |
	newName := UIManager default request: 'Give a name please'.
	newName isNotNil 
		ifTrue: [ name := newName ]
]]]

[[[
getLiving

	self startStepping
]]]

[[[
stopLiving

	self stopStepping
]]]



+LargerRounder>file://figures/LargerRounder|width=50|label=LargerRounder+





   ==drawOn:== controls the drawing of the Morph. We can for example add an oval. 

[[[
drawOn: aCanvas

	super drawOn: aCanvas.
	aCanvas fillOval: self bounds
			fillStyle: self fillStyle 
			borderWidth: 3
			borderColor: Color white.
]]]

+WithEllipse>file://figures/WithEllipse|width=50|label=WithEllipse+



[[[
eyesOn: aCanvas

	| b m y |
	b := self bounds.
	m := b width / 2.
	y := b width / 4.
	aCanvas 
			fillOval: ((b origin   + (m - 20 @ y)) extent: 10@10)
			fillStyle: self fillStyle 
			borderWidth: 3
			borderColor: Color white.
	aCanvas 
			fillOval: ((b origin   + (m + 15 @ y)) extent: 10@10)
			fillStyle: self fillStyle 
			borderWidth: 3
			borderColor: Color white.
]]]

[[[
drawOn: aCanvas

	super drawOn: aCanvas.
	self eyesOn: aCanvas
]]]

+justEyes>file://figures/justEyes|width=50|label=justEyes+



Now we can define the mouth of our digital animal by drawing two lines like in the following and we obtain Figure~\ref{fig:Smiling}.


[[[
mouthOn: aCanvas

	| b m y middlePoint |
	b := self bounds.
	m := b width / 2.
	y := b width / 1.8.
	middlePoint := b origin +  ( m@y ).
	aCanvas 
		line: b origin + ((m-15) @ (y -5)) to:  middlePoint width: 3 color: Color black.
	aCanvas 
		line: b origin + ((m+15) @ (y -5)) to: middlePoint width: 3 color: Color black.
]]]

[[[
drawOn: aCanvas

	super drawOn: aCanvas.
	self eyesOn: aCanvas.
	self mouthOn: aCanvas.
]]]

+A smiling tamagoshi.>file://figures/Smiling|width=50|label=Smiling+

!! Eating Behavior

Let us add a tummy to our tamagoshi. 

[[[
Morph subclass: #Tamagoshi
	instanceVariableNames: 'name tummy'
	classVariableNames: ''
	category: 'Tamagoshi'
]]]

[[[
initialize

	super initialize. 
	self useRoundedCorners.
	self extent: 100@80.
	name := 'pika'.
	tummy := 5.
]]]


Now we can also change the printing behavior to show its tummy.

[[[
step

	self logCr: 'hello, my name is ', name, ' and my tummy is: ', tummy printString.
]]]

[[[
tummyOn: aCanvas
	aCanvas
		drawString: tummy printString
		at: self bounds corner - (20 @ 20)
		font: nil
		color: Color yellow
]]]


+withbBelly>file://figures/withbBelly|width=50|label=withbBelly+


do not forget to change the drawOn: method to invoke the tummyOn: method.
[[[
drawOn: aCanvas

	super drawOn: aCanvas.
	self eyesOn: aCanvas.
	self mouthOn: aCanvas.
	self tummyOn: aCanvas. 
]]]

Now we would like to define the method eat so that we can feed our tamagoshi.



[[[
eat 

	tummy := tummy + 1
]]]



+Now we show the food items in the tamagoshi' tummy>file://figures/eating|width=50|label=eating+




[[[
eat 

	tummy := tummy + 1.
	self changed.
]]]


Now we will tell the morph that it should react to mouse events.
[[[
handlesMouseDown: evt
	"Returning true means that the morph can react to mouse click"

	^ true
]]]

And we will make sure that when we click on it, it gets fed.
[[[
mouseDown: evt
	
	self eat.	
]]]

Now it may be wise to limit the stomach capability of our digital friend. We revise then the eat method to only increase it if we did not reach a limit. 

[[[
eat 

	tummy < 55
		ifTrue: [ tummy := tummy + 1
				  self changed]. 
]]]

!!Digesting


Extract the code of the step method into a new method name talk.
[[[
talk

	self logCr: 'hello, my name is ', name, ' and my tummy is: ', tummy printString.
]]]

[[[
step

	self talk.
]]]

Now we are ready to make our tamagoshi digest its food. 

[[[
digest

	tummy := tummy - 1.
	self changed.
]]]

Try with the inspector to send some digest messages to your tamagoshi. 


Now this is annoying to add the changed message everywhere so we introduce a method named: 
[[[
tummy: aNumber

	tummy := aNumber.
	self changed.
]]]

and we use it in eat and digest

[[[
digest

	self tummy: tummy - 1.
]]]

[[[
eat 

	tummy < 55
		ifTrue: [ self tummy: tummy + 1 ]. 
]]]

[[[
step

	self talk.
	self digest.
]]]

You will quickly see that digest is wrong because we will get negative numbers really fast. So first we change 
the definition of digest to be 

[[[
digest
	tummy = 0 
		ifFalse: [ self tummy: tummy - 1]
]]]

Now since it is digesting too fast we should think how we could make our tamagoshi digest slower. What we need is 
a counter of the tick passed and based on that digest or not. So we add the hours instance variable to the class. 

[[[
Morph subclass: #Tamagoshi
	instanceVariableNames: 'name tummy hours'
	classVariableNames: ''
	category: 'Tamagoshi'
]]]

[[[
initialize

	super initialize. 
	self useRoundedCorners.
	self extent: 100@80.
	name := 'pika'.
	tummy := 5.
	hours := 0.
]]]


[[[
nextHour
	
	hours := hours + 1
]]]

[[[
step

	self talk.
	self nextHour.
	self digest
]]]

Now we can make our tamagoshi digest slower by simply making sure that several hours passed before it digests.
Just checking for example if the number of hours is divisible b a given number will do the trick.

[[[
step

	self talk.
	self nextHour.
	(hours isDivisibleBy: 3)
		ifTrue: [self digest ]
]]]


!! Hungry

Now we get ready to make our tamagoshi changing face when he is hungry. 

[[[
isHungry

	^ tummy isZero
]]]

We can now rewrite digest using isHungry as follow:
[[[
digest
	self isHungry
		ifFalse: [ self tummy: tummy - 1]
]]]


[[[
hungryMouthOn: aCanvas

	| b m y middlePoint |
	b := self bounds.
	m := b width / 2.
	y := b width / 1.8.
	middlePoint := b origin +  ( m@y ).
	aCanvas 
		line: b origin + ((m-15) @ (y + 5)) to:  middlePoint width: 3 color: Color black.
	aCanvas 
		line: b origin + ((m+15) @ (y + 5)) to: middlePoint width: 3 color: Color black.
]]]


+Our tamagoshi shows now that he is hungry>file://figures/hungry|width=50|label=hungry+

Now we can change a bit the messages send by our tamagoshi. 

[[[
talk

	self isHungry
		ifTrue: [ self logCr: 'Please feed me' ]
		ifFalse: [ self logCr: 'hello, my name is ', name, ' and I''m ok'].
]]]


!!Nights and days
Now we want to manage the night and day period of our tamagoshi. 


[[[
Morph subclass: #Tamagoshi
	instanceVariableNames: 'name tummy hours isNight'
	classVariableNames: ''
	category: 'Tamagoshi'
]]]

[[[
initialize

	super initialize. 
	self useRoundedCorners.
	self extent: 100@80.
	name := 'pika'.
	tummy := 5.
	hours := 0.
	isNight := false
]]]

[[[
isNight

	^ isNight
]]]

[[[
switchDayPeriod
	"Switch from night to day and day to night"
	isNight := isNight not.
]]]

[[[
checkAndNextDayPeriod
	"Switch from night to day and day to night when necessary" 

	(hours isDivisibleBy: 12)
		ifTrue: [ self switchDayPeriod ]
]]]


We can change the messages to show that our animal is sleeping

[[[
talk
	self isNight
		ifTrue: [ self logCr: 'ZZZzzzzzzz' ]
		ifFalse: [ 
			self isHungry
				ifTrue: [ self logCr: 'Please feed me' ]
				ifFalse: [ self logCr: 'hello, my name is ' , name , ' and I''m ok' ] ]
]]]

As we will see later, these conditionals all over the place are not that nice, each time we
add a new behavior we have to change talk and the drawOn: method logic becomes more and more complex. 

[[[
sleepyEyesOn: aCanvas

	| b m y |
	b := self bounds.
	m := b width / 2.
	y := b width / 4.
	aCanvas 
			fillOval: ((b origin   + (m - 20 @ y)) extent: 11@5)
			fillStyle: self fillStyle 
			borderWidth: 3
			borderColor: Color white.
	aCanvas 
			fillOval: ((b origin   + (m + 15 @ y)) extent: 11@5)
			fillStyle: self fillStyle 
			borderWidth: 3
			borderColor: Color white.
]]]

[[[
drawOn: aCanvas
	super drawOn: aCanvas.
	self isNight
		ifTrue: [ 
				self sleepyEyesOn: aCanvas.
				self color: Color darkGray ]
		ifFalse: [ 
			self eyesOn: aCanvas.
			self isHungry
				ifTrue: [ 
					self color: Color red.
					self hungryMouthOn: aCanvas ]
				ifFalse: [ 
					self color: Color blue.
					self mouthOn: aCanvas ] ].
	self bellyOn: aCanvas.
	self changed.
]]]


+sleeping>file://figures/sleeping|width=50|label=sleeping+




!! Further Experiments
Now we propose you different modifications to change the behavior of your tomagoshi. 


- Make that we can only feed the tomagoshi the day. 
- Make it die when it is starving from too long time (hints you can use the method ==delete== or ==stopStepping==.
- Make it happy, you could make it sings.
- Change its graphical representation.  






